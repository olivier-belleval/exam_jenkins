# Namespace declarations for dev, qa, staging, and prod
apiVersion: v1
kind: Namespace
metadata:
  name: dev
---
apiVersion: v1
kind: Namespace
metadata:
  name: qa
---
apiVersion: v1
kind: Namespace
metadata:
  name: staging
---
apiVersion: v1
kind: Namespace
metadata:
  name: prod
---
# Postgres Deployment and Service for movie_db in dev namespace
apiVersion: apps/v1
kind: Deployment
metadata:
  name: movie-db
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: movie-db
  template:
    metadata:
      labels:
        app: movie-db
    spec:
      containers:
        - name: movie-db
          image: postgres:12.1-alpine
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secretName }}
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secretName }}
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secretName }}
                  key: POSTGRES_DB
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-data
      volumes:
        - name: postgres-data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: movie-db-service
  namespace: dev
spec:
  ports:
    - port: 5432
  selector:
    app: movie-db
---
# Postgres Deployment and Service for cast_db in dev namespace
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cast-db
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cast-db
  template:
    metadata:
      labels:
        app: cast-db
    spec:
      containers:
        - name: cast-db
          image: postgres:12.1-alpine
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secretName }}
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secretName }}
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secretName }}
                  key: POSTGRES_DB
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-data
      volumes:
        - name: postgres-data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: cast-db-service
  namespace: dev
spec:
  ports:
    - port: 5432
  selector:
    app: cast-db
---
# Movie Service Deployment and Service in dev namespace
apiVersion: apps/v1
kind: Deployment
metadata:
  name: movie-service
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: movie-service
  template:
    metadata:
      labels:
        app: movie-service
    spec:
      containers:
        - name: movie-service
          image: kilann31/exam_jenkins:movie_service
          ports:
            - containerPort: 8000
          env:
            - name: DATABASE_URI
              value: {{ .Values.env.CAST_SERVICE_HOST_URL }}
            - name: CAST_SERVICE_HOST_URL
              value: "http://cast-service:8000/api/v1/casts/"
---
apiVersion: v1
kind: Service
metadata:
  name: movie-service
  namespace: dev
spec:
  selector:
    app: movie-service
  ports:
    - protocol: "TCP"
      port: 8001
      targetPort: 8000
---
# Cast Service Deployment and Service in dev namespace
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cast-service
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cast-service
  template:
    metadata:
      labels:
        app: cast-service
    spec:
      containers:
        - name: cast-service
          image: kilann31/exam_jenkins:cast_service
          ports:
            - containerPort: 8000
          env:
            - name: DATABASE_URI
              value: {{ .Values.env.CAST_SERVICE_HOST_URL }}
---
apiVersion: v1
kind: Service
metadata:
  name: cast-service
  namespace: dev
spec:
  selector:
    app: cast-service
  ports:
    - protocol: "TCP"
      port: 8002
      targetPort: 8000
---
# Nginx Deployment and Service in dev namespace
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:latest
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: dev
spec:
  selector:
    app: nginx
  ports:
    - protocol: "TCP"
      port: 8080
      targetPort: 8080
---
# ConfigMap for Nginx
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: dev
data:
  default.conf: |
    server {
      listen 8080;
    
      location /api/v1/movies {
        proxy_pass http://movie_service:8000/api/v1/movies;
      }
    
      location /api/v1/casts {
        proxy_pass http://cast_service:8000/api/v1/casts;
      }
}